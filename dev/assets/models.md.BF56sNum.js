import{_ as o,C as r,c as p,o as d,j as s,aA as l,a as t,G as e,w as n}from"./chunks/framework.B_iG_fnF.js";const G=JSON.parse('{"title":"Models","description":"","frontmatter":{},"headers":[],"relativePath":"models.md","filePath":"models.md","lastUpdated":null}'),h={name:"models.md"},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""};function x(B,i,S,L,z,I){const a=r("Badge");return d(),p("div",null,[i[80]||(i[80]=s("h1",{id:"Models",tabindex:"-1"},[t("Models "),s("a",{class:"header-anchor",href:"#Models","aria-label":'Permalink to "Models {#Models}"'},"​")],-1)),i[81]||(i[81]=s("p",null,"We offer a catalogue of frequently used models that are already integrated with the framework and ready to be used. We maintain that if a model you'd like to use is not included in the list, you can swiftly define one yourself and leverage our framework nonetheless.",-1)),i[82]||(i[82]=s("h2",{id:"Discrete-state-models",tabindex:"-1"},[t("Discrete state models "),s("a",{class:"header-anchor",href:"#Discrete-state-models","aria-label":'Permalink to "Discrete state models {#Discrete-state-models}"'},"​")],-1)),i[83]||(i[83]=s("p",null,[t("Here we account for a typical set-up for a discrete state "),s("code",null,"Partition"),t(":")],-1)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"MolecularEvolution.DiscretePartition-models",href:"#MolecularEvolution.DiscretePartition-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.DiscretePartition")],-1)),i[1]||(i[1]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DiscretePartition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MultiSitePartition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Represents a <code>states</code>-by-<code>sites</code> matrix of probabilities. The following fields are loosely required:</p><ul><li><p><code>state</code>: A matrix of probabilities that are site-wise normalized.</p></li><li><p><code>states</code>: The number of states.</p></li><li><p><code>sites</code>: The number of sites.</p></li><li><p><code>scaling</code>: A vector of log-domain probability scaling factors, one per site.</p></li></ul>',3)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/discrete_models/discrete_partitions.jl#L5-L13",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),i[84]||(i[84]=l('<p>And here&#39;s a list of simple concrete subtypes of <code>DiscretePartition</code>:</p><ul><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.CodonPartition"><code>CodonPartition</code></a></p></li><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.CustomDiscretePartition"><code>CustomDiscretePartition</code></a></p></li><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.NucleotidePartition"><code>NucleotidePartition</code></a></p></li><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.GappyNucleotidePartition"><code>GappyNucleotidePartition</code></a></p></li><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.AminoAcidPartition"><code>AminoAcidPartition</code></a></p></li><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.GappyAminoAcidPartition"><code>GappyAminoAcidPartition</code></a></p></li></ul><p>And then there are two typical <code>BranchModel</code>s that will cooperate with this <code>Partition</code>:</p><ul><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.GeneralCTMC"><code>GeneralCTMC</code></a></p></li><li><p><a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.DiagonalizedCTMC"><code>DiagonalizedCTMC</code></a></p></li></ul><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The two above can be regarded as special cases of the more general <a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.PModel"><code>PModel</code></a>, which just represents a P matrix.</p></div><p>A typical way of constructing your Q matrix in our ecosystem is by:</p>',6)),s("details",u,[s("summary",null,[i[4]||(i[4]=s("a",{id:"MolecularEvolution.reversibleQ-models",href:"#MolecularEvolution.reversibleQ-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.reversibleQ")],-1)),i[5]||(i[5]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[7]||(i[7]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reversibleQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(param_vec,eq_freqs)</span></span></code></pre></div><p>Takes a vector of parameters and equilibrium frequencies and returns a reversible rate matrix. The parameters are the upper triangle of the rate matrix, with the diagonal elements omitted, and the equilibrium frequencies are multiplied column-wise.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/discrete_models/utils/matrix_helpers.jl#L122-L128",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",c,[s("summary",null,[i[8]||(i[8]=s("a",{id:"MolecularEvolution.nonreversibleQ-models",href:"#MolecularEvolution.nonreversibleQ-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.nonreversibleQ")],-1)),i[9]||(i[9]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[11]||(i[11]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nonreversibleQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(param_vec)</span></span></code></pre></div><p>Takes a vector of parameters and returns a nonreversible rate matrix.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[10]||(i[10]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/discrete_models/utils/matrix_helpers.jl#L151-L155",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),i[85]||(i[85]=s("h3",{id:"Codon-models",tabindex:"-1"},[t("Codon models "),s("a",{class:"header-anchor",href:"#Codon-models","aria-label":'Permalink to "Codon models {#Codon-models}"'},"​")],-1)),s("details",g,[s("summary",null,[i[12]||(i[12]=s("a",{id:"MolecularEvolution.CodonPartition-models",href:"#MolecularEvolution.CodonPartition-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.CodonPartition")],-1)),i[13]||(i[13]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CodonPartition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DiscretePartition</span></span></code></pre></div><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CodonPartition(sites; code = universal_code)</span></span>
<span class="line"><span>CodonPartition(state, states, sites, scaling; code = universal_code)</span></span></code></pre></div><p><strong>Description</strong></p><p>A <code>DiscretePartition</code> where every state represents a codon. Can be customized to use different genetic codes.</p>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[14]||(i[14]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/discrete_models/codon_models.jl#L349-L357",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),i[86]||(i[86]=l('<p>We offer constructors for the following Q matrix parameterizations:</p><ul><li><p><code>MolecularEvolution.MG94_F3x4</code> - for example usage, see <a href="/MolecularEvolution.jl/dev/examples#Example-3:-FUBAR">Example 3: FUBAR</a></p></li><li><p><code>MolecularEvolution.MG94_F61</code></p></li><li><p><code>MolecularEvolution.HB98_F61</code></p></li><li><p><code>MolecularEvolution.HB98_AAfit</code></p></li></ul><p>Use help mode, <code>?</code>, in the REPL to find out more about the above.</p><h3 id="Miscellaneous-models" tabindex="-1">Miscellaneous models <a class="header-anchor" href="#Miscellaneous-models" aria-label="Permalink to &quot;Miscellaneous models {#Miscellaneous-models}&quot;">​</a></h3>',4)),s("details",E,[s("summary",null,[i[16]||(i[16]=s("a",{id:"MolecularEvolution.InterpolatedDiscreteModel-models",href:"#MolecularEvolution.InterpolatedDiscreteModel-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.InterpolatedDiscreteModel")],-1)),i[17]||(i[17]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[19]||(i[19]=l(`<p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">InterpolatedDiscreteModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(siz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, generator, tvec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">InterpolatedDiscreteModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Pvec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array{Float64,3}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tvec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>generator</code> is a function that takes a time value <code>t</code> and returns a P matrix.</p><p><strong>Description</strong></p><p>Stores a number (<code>siz</code>) of P matrices, and the time values to which they correspond. For a requested t, the returned P matrix is (element-wise linearly) interpolated between it&#39;s two neighbours.</p>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[18]||(i[18]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/discrete_models/interpolated_discrete_model.jl#L5-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),s("details",y,[s("summary",null,[i[20]||(i[20]=s("a",{id:"MolecularEvolution.PiQ-models",href:"#MolecularEvolution.PiQ-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.PiQ")],-1)),i[21]||(i[21]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[23]||(i[23]=l(`<p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PiQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; normalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PiQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; normalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description</strong></p><p>The F81 substitution model, but for general dimensions. <a href="https://www.diva-portal.org/smash/get/diva2:1878793/FULLTEXT01.pdf" target="_blank" rel="noreferrer">https://www.diva-portal.org/smash/get/diva2:1878793/FULLTEXT01.pdf</a></p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[22]||(i[22]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/discrete_models/PiQ.jl#L4-L13",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),i[87]||(i[87]=s("h2",{id:"Continuous-models",tabindex:"-1"},[t("Continuous models "),s("a",{class:"header-anchor",href:"#Continuous-models","aria-label":'Permalink to "Continuous models {#Continuous-models}"'},"​")],-1)),i[88]||(i[88]=s("p",null,"The partition of interest is:",-1)),s("details",m,[s("summary",null,[i[24]||(i[24]=s("a",{id:"MolecularEvolution.GaussianPartition-models",href:"#MolecularEvolution.GaussianPartition-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.GaussianPartition")],-1)),i[25]||(i[25]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[27]||(i[27]=l(`<p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GaussianPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, norm_const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GaussianPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># norm_const defaults to 0.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GaussianPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># mean, var, norm_const default to 0.0, 1.0, 0.0 respectively</span></span></code></pre></div><p><strong>Description</strong></p><p>A partition representing a (not necessarily normalized) Gaussian distribution. <code>norm_const</code> is the log-domain normalization constant.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[26]||(i[26]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/continuous_models/gaussian_partition.jl#L3-L12",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),i[89]||(i[89]=s("p",null,[t("And then there are two "),s("code",null,"BranchModel"),t("s which are compatible with the above partition, namely:")],-1)),s("details",b,[s("summary",null,[i[28]||(i[28]=s("a",{id:"MolecularEvolution.BrownianMotion-models",href:"#MolecularEvolution.BrownianMotion-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.BrownianMotion")],-1)),i[29]||(i[29]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[31]||(i[31]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BrownianMotion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mean_drift</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, var_drift</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A 1D continuous Brownian motion model with mean drift and variance drift.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[30]||(i[30]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/continuous_models/brownian_motion.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),s("details",C,[s("summary",null,[i[32]||(i[32]=s("a",{id:"MolecularEvolution.ZeroDriftOrnsteinUhlenbeck-models",href:"#MolecularEvolution.ZeroDriftOrnsteinUhlenbeck-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.ZeroDriftOrnsteinUhlenbeck")],-1)),i[33]||(i[33]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[35]||(i[35]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ZeroDriftOrnsteinUhlenbeck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    volatility</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reversion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A 1D continuous Ornstein-Uhlenbeck process with mean, volatility, and reversion.</p>`,2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[34]||(i[34]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/continuous_models/ornstein_uhlenbeck.jl#L3-L11",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),i[90]||(i[90]=s("h2",{id:"Compound-models",tabindex:"-1"},[t("Compound models "),s("a",{class:"header-anchor",href:"#Compound-models","aria-label":'Permalink to "Compound models {#Compound-models}"'},"​")],-1)),i[91]||(i[91]=s("h3",{id:"Branch-wise-mixture",tabindex:"-1"},[t("Branch-wise mixture "),s("a",{class:"header-anchor",href:"#Branch-wise-mixture","aria-label":'Permalink to "Branch-wise mixture {#Branch-wise-mixture}"'},"​")],-1)),s("details",f,[s("summary",null,[i[36]||(i[36]=s("a",{id:"MolecularEvolution.BWMModel-models",href:"#MolecularEvolution.BWMModel-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.BWMModel")],-1)),i[37]||(i[37]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[39]||(i[39]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BWMModel{M} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DiscreteStateModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DiscreteStateModel</span></span></code></pre></div><p><strong>Fields</strong></p><ul><li><p><code>models::Vector{&lt;:M}</code>: A vector of models.</p></li><li><p><code>weights::Vector{Float64}</code>: A vector of weights.</p></li></ul><p><strong>Description</strong></p><p>Branch-wise mixture model.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p><code>forward!</code> and <code>backward!</code> are currently only defined for <code>M&lt;:PMatrixModel</code>.</p></div>',6)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[38]||(i[38]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/compound_models/bwm.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),i[92]||(i[92]=s("h3",{id:"CAT",tabindex:"-1"},[t("CAT "),s("a",{class:"header-anchor",href:"#CAT","aria-label":'Permalink to "CAT {#CAT}"'},"​")],-1)),s("details",v,[s("summary",null,[i[40]||(i[40]=s("a",{id:"MolecularEvolution.CATModel-models",href:"#MolecularEvolution.CATModel-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.CATModel")],-1)),i[41]||(i[41]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[43]||(i[43]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CATModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:BranchModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>CAT is something where you split the sites up, and assign each site to a different model (whose &quot;data&quot; gets stored in a contiguous block of memory).</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[42]||(i[42]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/compound_models/cat.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),s("details",F,[s("summary",null,[i[44]||(i[44]=s("a",{id:"MolecularEvolution.CATPartition-models",href:"#MolecularEvolution.CATPartition-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.CATPartition")],-1)),i[45]||(i[45]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[47]||(i[47]=l(`<p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CATPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part_inds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Vector{Int}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CATPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part_inds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Vector{Int}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{PType}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description</strong></p><p>A partition for the <a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.CATModel"><code>CATModel</code></a>.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[46]||(i[46]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/compound_models/cat.jl#L15-L23",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),i[93]||(i[93]=s("h3",{id:"Covarion",tabindex:"-1"},[t("Covarion "),s("a",{class:"header-anchor",href:"#Covarion","aria-label":'Permalink to "Covarion {#Covarion}"'},"​")],-1)),s("details",_,[s("summary",null,[i[48]||(i[48]=s("a",{id:"MolecularEvolution.CovarionModel-models",href:"#MolecularEvolution.CovarionModel-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.CovarionModel")],-1)),i[49]||(i[49]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[51]||(i[51]=l(`<p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CovarionModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:DiscreteStateModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inter_transition_rates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CovarionModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:DiscreteStateModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inter_transition_rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description</strong></p><p>The covarion model.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[50]||(i[50]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/compound_models/covarion.jl#L2-L10",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),s("details",T,[s("summary",null,[i[52]||(i[52]=s("a",{id:"MolecularEvolution.CovarionPartition-models",href:"#MolecularEvolution.CovarionPartition-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.CovarionPartition")],-1)),i[53]||(i[53]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[55]||(i[55]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CovarionPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states,sites,models,t)</span></span></code></pre></div><p>A partition for the <a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.CovarionModel"><code>CovarionModel</code></a>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[54]||(i[54]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/compound_models/covarion.jl#L47-L51",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),i[94]||(i[94]=s("h3",{id:"Site-wise-mixture",tabindex:"-1"},[t("Site-wise mixture "),s("a",{class:"header-anchor",href:"#Site-wise-mixture","aria-label":'Permalink to "Site-wise mixture {#Site-wise-mixture}"'},"​")],-1)),i[95]||(i[95]=s("p",null,[t("See "),s("a",{href:"/MolecularEvolution.jl/dev/examples#Example-2:-GTRGamma"},"Example 2: GTR+Gamma"),t(" for example usage.")],-1)),s("details",M,[s("summary",null,[i[56]||(i[56]=s("a",{id:"MolecularEvolution.SWMModel-models",href:"#MolecularEvolution.SWMModel-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.SWMModel")],-1)),i[57]||(i[57]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[59]||(i[59]=l(`<p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SWMModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:BranchModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SWMModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BranchModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Description</strong></p><p>A site-wise mixture model, for site-to-site &quot;random effects&quot; rate variation.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[58]||(i[58]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/compound_models/swm.jl#L17-L25",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),s("details",j,[s("summary",null,[i[60]||(i[60]=s("a",{id:"MolecularEvolution.SWMPartition-models",href:"#MolecularEvolution.SWMPartition-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.SWMPartition")],-1)),i[61]||(i[61]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[63]||(i[63]=l(`<p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SWMPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{PType}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {PType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MultiSitePartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SWMPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {PType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MultiSitePartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SWMPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{PType}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weights</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sites</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {PType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MultiSitePartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Description</strong></p><p>A site-wise mixture partition for the <a href="/MolecularEvolution.jl/dev/api#MolecularEvolution.SWMModel"><code>SWMModel</code></a>.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[62]||(i[62]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/compound_models/swm.jl#L46-L55",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),i[96]||(i[96]=s("h2",{id:"Lazy-models",tabindex:"-1"},[t("Lazy models "),s("a",{class:"header-anchor",href:"#Lazy-models","aria-label":'Permalink to "Lazy models {#Lazy-models}"'},"​")],-1)),i[97]||(i[97]=s("h3",{id:"LazyPartition",tabindex:"-1"},[t("LazyPartition "),s("a",{class:"header-anchor",href:"#LazyPartition","aria-label":'Permalink to "LazyPartition {#LazyPartition}"'},"​")],-1)),s("details",A,[s("summary",null,[i[64]||(i[64]=s("a",{id:"MolecularEvolution.LazyPartition-models",href:"#MolecularEvolution.LazyPartition-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.LazyPartition")],-1)),i[65]||(i[65]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[67]||(i[67]=l('<p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LazyPartition{PType}()</span></span></code></pre></div><p>Initialize an empty <code>LazyPartition</code> that is meant for wrapping a partition of type <code>PType</code>.</p><p><strong>Description</strong></p><p>With this data structure, you can wrap a partition of choice. The idea is that in some message passing algorithms, there is only a wave of partitions which need to actualize. For instance, a wave following a root-leaf path, or a depth-first traversal. In which case, we can be more economical with our memory consumption. With a worst case memory complexity of O(log(n)), where n is the number of nodes, functionality is provided for:</p><ul><li><p><code>log_likelihood!</code></p></li><li><p><code>felsenstein!</code></p></li><li><p><code>sample_down!</code></p></li></ul><div class="tip custom-block"><p class="custom-block-title">Note</p><p>For successive <code>felsenstein!</code> calls, we need to extract the information at the root somehow after each call. This can be done with e.g. <code>total_LL</code> or <code>site_LLs</code>.</p></div><p><strong>Further requirements</strong></p><p>Suppose you want to wrap a partition of <code>PType</code> with <code>LazyPartition</code>:</p><ul><li><p>If you&#39;re calling <code>log_likelihood!</code> and <code>felsenstein!</code>:</p><ul><li><code>obs2partition!(partition::PType, obs)</code> that transforms an observation to a partition.</li></ul></li><li><p>If you&#39;re calling <code>sample_down!</code>:</p><ul><li><code>partition2obs(partition::PType)</code> that returns the most likely state from a partition, inverts <code>obs2partition!</code>.</li></ul></li></ul>',10)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[66]||(i[66]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/lazy_models/lazy_partition.jl#L2-L25",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})]),i[98]||(i[98]=l(`<h4 id="Examples" tabindex="-1">Examples <a class="header-anchor" href="#Examples" aria-label="Permalink to &quot;Examples {#Examples}&quot;">​</a></h4><h5 id="Example-1:-Initializing-for-an-upward-pass" tabindex="-1">Example 1: Initializing for an upward pass <a class="header-anchor" href="#Example-1:-Initializing-for-an-upward-pass" aria-label="Permalink to &quot;Example 1: Initializing for an upward pass {#Example-1:-Initializing-for-an-upward-pass}&quot;">​</a></h5><p>Now, we show how to wrap the <code>CodonPartition</code>s from <a href="/MolecularEvolution.jl/dev/examples#Example-3:-FUBAR">Example 3: FUBAR</a> with <code>LazyPartition</code>:</p><p>You simply go from initializing messages like this:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initial_partition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CodonPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seqs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initial_partition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eq_freqs</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">populate_tree!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree,initial_partition,seqnames,seqs)</span></span></code></pre></div><p>To this</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initial_partition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CodonPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seqs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initial_partition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eq_freqs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lazy_initial_partition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LazyPartition{CodonPartition}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">populate_tree!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree,lazy_initial_partition,seqnames,seqs)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lazyprep!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, initial_partition)</span></span></code></pre></div><p>By this slight modification, we go from initializing and using 554 partitions to 6 during the subsequent <code>log_likelihood!</code> and <code>felsenstein!</code> calls. There is no significant decrease in performance recorded from this switch.</p><h5 id="Example-2:-Initializing-for-a-downward-pass" tabindex="-1">Example 2: Initializing for a downward pass <a class="header-anchor" href="#Example-2:-Initializing-for-a-downward-pass" aria-label="Permalink to &quot;Example 2: Initializing for a downward pass {#Example-2:-Initializing-for-a-downward-pass}&quot;">​</a></h5><p>Now, we show how to wrap the <code>GaussianPartition</code>s from <a href="/MolecularEvolution.jl/dev/intro#Quick-example:-Likelihood-calculations-under-phylogenetic-Brownian-motion:">Quick example: Likelihood calculations under phylogenetic Brownian motion:</a> with <code>LazyPartition</code>:</p><p>You simply go from initializing messages like this:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">internal_message_init!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GaussianPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>To this (technically we only add 1 LOC)</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initial_partition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GaussianPartition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lazy_initial_partition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LazyPartition{GaussianPartition}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">internal_message_init!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, lazy_initial_partition)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lazyprep!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, initial_partition, direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LazyDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isleafnode))</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Now, we provided a direction for <code>lazyprep!</code>. The direction is an instance of <code>LazyDown</code>, which was initialized with the <code>isleafnode</code> function. The function <code>isleafnode</code> dictates if a node saves its sampled observation after a down pass. If you use <code>direction=LazyDown()</code>, every node saves its observation.</p></div><h4 id="Surrounding-LazyPartition" tabindex="-1">Surrounding LazyPartition <a class="header-anchor" href="#Surrounding-LazyPartition" aria-label="Permalink to &quot;Surrounding LazyPartition {#Surrounding-LazyPartition}&quot;">​</a></h4>`,16)),s("details",P,[s("summary",null,[i[68]||(i[68]=s("a",{id:"MolecularEvolution.lazyprep!-models",href:"#MolecularEvolution.lazyprep!-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.lazyprep!")],-1)),i[69]||(i[69]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[71]||(i[71]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lazyprep!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FelNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, initial_message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:Partition}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; partition_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message), direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LazyDirection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LazyUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Extra, intermediate step of tree preparations between initializing messages across the tree and calling message passing algorithms with <code>LazyPartition</code>.</p><ol><li><p>Perform a <code>lazysort!</code> on tree to obtain the optimal tree for a lazy <code>felsenstein!</code> prop, or a <code>sample_down!</code>.</p></li><li><p>Fix <code>tree.parent_message</code> to an initial message.</p></li><li><p>Preallocate sufficiently many inner partitions needed for a <code>felsenstein!</code> prop, or a <code>sample_down!</code>.</p></li><li><p>Specialized preparations based on the direction of the operations (<code>forward!</code>, <code>backward!</code>). <code>LazyDown</code> or <code>LazyUp</code>.</p></li></ol><p>See also <code>LazyDown</code>, <code>LazyUp</code>.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[70]||(i[70]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/lazy_models/lazy_partition.jl#L200-L210",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[70]})]),s("details",D,[s("summary",null,[i[72]||(i[72]=s("a",{id:"MolecularEvolution.LazyUp-models",href:"#MolecularEvolution.LazyUp-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.LazyUp")],-1)),i[73]||(i[73]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[75]||(i[75]=l('<p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LazyUp()</span></span></code></pre></div><p><strong>Description</strong></p><p>Indicate that we want to do an upward pass, e.g. <code>felsenstein!</code>.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[74]||(i[74]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/lazy_models/lazy_partition.jl#L42-L48",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[74]})]),s("details",w,[s("summary",null,[i[76]||(i[76]=s("a",{id:"MolecularEvolution.LazyDown-models",href:"#MolecularEvolution.LazyDown-models"},[s("span",{class:"jlbinding"},"MolecularEvolution.LazyDown")],-1)),i[77]||(i[77]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[79]||(i[79]=l(`<p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LazyDown(stores_obs)</span></span>
<span class="line"><span>LazyDown() = LazyDown(x::FelNode -&gt; true)</span></span></code></pre></div><p><strong>Description</strong></p><p>Indicate that we want to do a downward pass, e.g. <code>sample_down!</code>. The function passed to the constructor takes a <code>node::FelNode</code> as input and returns a <code>Bool</code> that decides if <code>node</code> stores its observations.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[78]||(i[78]=[s("a",{href:"https://github.com/MurrellGroup/MolecularEvolution.jl/blob/243e6dc59c54630be29bf9034b3ff8da62d24e18/src/models/lazy_models/lazy_partition.jl#L51-L59",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[78]})])])}const N=o(h,[["render",x]]);export{G as __pageData,N as default};
